// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sachatarba/course-db/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IEquipmentRepository is an autogenerated mock type for the IEquipmentRepository type
type IEquipmentRepository struct {
	mock.Mock
}

// ChangeEquipment provides a mock function with given fields: ctx, equipment
func (_m *IEquipmentRepository) ChangeEquipment(ctx context.Context, equipment entity.Equipment) error {
	ret := _m.Called(ctx, equipment)

	if len(ret) == 0 {
		panic("no return value specified for ChangeEquipment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Equipment) error); ok {
		r0 = rf(ctx, equipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewEquipment provides a mock function with given fields: ctx, equipment
func (_m *IEquipmentRepository) CreateNewEquipment(ctx context.Context, equipment entity.Equipment) error {
	ret := _m.Called(ctx, equipment)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewEquipment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Equipment) error); ok {
		r0 = rf(ctx, equipment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEquipment provides a mock function with given fields: ctx, equipmentID
func (_m *IEquipmentRepository) DeleteEquipment(ctx context.Context, equipmentID uuid.UUID) error {
	ret := _m.Called(ctx, equipmentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEquipment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, equipmentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEquipmentByID provides a mock function with given fields: ctx, equipmentID
func (_m *IEquipmentRepository) GetEquipmentByID(ctx context.Context, equipmentID uuid.UUID) (entity.Equipment, error) {
	ret := _m.Called(ctx, equipmentID)

	if len(ret) == 0 {
		panic("no return value specified for GetEquipmentByID")
	}

	var r0 entity.Equipment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Equipment, error)); ok {
		return rf(ctx, equipmentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Equipment); ok {
		r0 = rf(ctx, equipmentID)
	} else {
		r0 = ret.Get(0).(entity.Equipment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, equipmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEquipmentsByGymID provides a mock function with given fields: ctx, gymID
func (_m *IEquipmentRepository) ListEquipmentsByGymID(ctx context.Context, gymID uuid.UUID) ([]entity.Equipment, error) {
	ret := _m.Called(ctx, gymID)

	if len(ret) == 0 {
		panic("no return value specified for ListEquipmentsByGymID")
	}

	var r0 []entity.Equipment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]entity.Equipment, error)); ok {
		return rf(ctx, gymID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []entity.Equipment); ok {
		r0 = rf(ctx, gymID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Equipment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, gymID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIEquipmentRepository creates a new instance of IEquipmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEquipmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEquipmentRepository {
	mock := &IEquipmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
