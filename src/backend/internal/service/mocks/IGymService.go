// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sachatarba/course-db/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IGymService is an autogenerated mock type for the IGymService type
type IGymService struct {
	mock.Mock
}

// ChangeGym provides a mock function with given fields: ctx, gym
func (_m *IGymService) ChangeGym(ctx context.Context, gym entity.Gym) error {
	ret := _m.Called(ctx, gym)

	if len(ret) == 0 {
		panic("no return value specified for ChangeGym")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Gym) error); ok {
		r0 = rf(ctx, gym)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGym provides a mock function with given fields: ctx, gymID
func (_m *IGymService) DeleteGym(ctx context.Context, gymID uuid.UUID) error {
	ret := _m.Called(ctx, gymID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGym")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, gymID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGymByID provides a mock function with given fields: ctx, gymID
func (_m *IGymService) GetGymByID(ctx context.Context, gymID uuid.UUID) (entity.Gym, error) {
	ret := _m.Called(ctx, gymID)

	if len(ret) == 0 {
		panic("no return value specified for GetGymByID")
	}

	var r0 entity.Gym
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Gym, error)); ok {
		return rf(ctx, gymID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Gym); ok {
		r0 = rf(ctx, gymID)
	} else {
		r0 = ret.Get(0).(entity.Gym)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, gymID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGyms provides a mock function with given fields: ctx
func (_m *IGymService) ListGyms(ctx context.Context) ([]entity.Gym, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListGyms")
	}

	var r0 []entity.Gym
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Gym, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Gym); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Gym)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewGym provides a mock function with given fields: ctx, gym
func (_m *IGymService) RegisterNewGym(ctx context.Context, gym entity.Gym) error {
	ret := _m.Called(ctx, gym)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNewGym")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Gym) error); ok {
		r0 = rf(ctx, gym)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIGymService creates a new instance of IGymService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGymService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGymService {
	mock := &IGymService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
