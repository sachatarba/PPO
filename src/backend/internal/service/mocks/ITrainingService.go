// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sachatarba/course-db/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ITrainingService is an autogenerated mock type for the ITrainingService type
type ITrainingService struct {
	mock.Mock
}

// ChangeTraining provides a mock function with given fields: ctx, training
func (_m *ITrainingService) ChangeTraining(ctx context.Context, training entity.Training) error {
	ret := _m.Called(ctx, training)

	if len(ret) == 0 {
		panic("no return value specified for ChangeTraining")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Training) error); ok {
		r0 = rf(ctx, training)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewTraining provides a mock function with given fields: ctx, training
func (_m *ITrainingService) CreateNewTraining(ctx context.Context, training entity.Training) error {
	ret := _m.Called(ctx, training)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewTraining")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Training) error); ok {
		r0 = rf(ctx, training)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTraining provides a mock function with given fields: ctx, trainingID
func (_m *ITrainingService) DeleteTraining(ctx context.Context, trainingID uuid.UUID) error {
	ret := _m.Called(ctx, trainingID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTraining")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, trainingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTrainingsByTrainerID provides a mock function with given fields: ctx, trainerID
func (_m *ITrainingService) ListTrainingsByTrainerID(ctx context.Context, trainerID uuid.UUID) ([]entity.Training, error) {
	ret := _m.Called(ctx, trainerID)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainingsByTrainerID")
	}

	var r0 []entity.Training
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]entity.Training, error)); ok {
		return rf(ctx, trainerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []entity.Training); ok {
		r0 = rf(ctx, trainerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Training)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, trainerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITrainingService creates a new instance of ITrainingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITrainingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITrainingService {
	mock := &ITrainingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
