// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sachatarba/course-db/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IClientMembershipsRepository is an autogenerated mock type for the IClientMembershipsRepository type
type IClientMembershipsRepository struct {
	mock.Mock
}

// ChangeClientMembership provides a mock function with given fields: ctx, clientMembership
func (_m *IClientMembershipsRepository) ChangeClientMembership(ctx context.Context, clientMembership entity.ClientMembership) error {
	ret := _m.Called(ctx, clientMembership)

	if len(ret) == 0 {
		panic("no return value specified for ChangeClientMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ClientMembership) error); ok {
		r0 = rf(ctx, clientMembership)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewClientMembership provides a mock function with given fields: ctx, clientMembership
func (_m *IClientMembershipsRepository) CreateNewClientMembership(ctx context.Context, clientMembership entity.ClientMembership) error {
	ret := _m.Called(ctx, clientMembership)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewClientMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ClientMembership) error); ok {
		r0 = rf(ctx, clientMembership)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClientMembership provides a mock function with given fields: ctx, clientMembershipID
func (_m *IClientMembershipsRepository) DeleteClientMembership(ctx context.Context, clientMembershipID uuid.UUID) error {
	ret := _m.Called(ctx, clientMembershipID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, clientMembershipID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClientMembershipByID provides a mock function with given fields: ctx, clientMembershipID
func (_m *IClientMembershipsRepository) GetClientMembershipByID(ctx context.Context, clientMembershipID uuid.UUID) (entity.ClientMembership, error) {
	ret := _m.Called(ctx, clientMembershipID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientMembershipByID")
	}

	var r0 entity.ClientMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.ClientMembership, error)); ok {
		return rf(ctx, clientMembershipID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.ClientMembership); ok {
		r0 = rf(ctx, clientMembershipID)
	} else {
		r0 = ret.Get(0).(entity.ClientMembership)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, clientMembershipID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClientMembershipsByClientID provides a mock function with given fields: ctx, clientID
func (_m *IClientMembershipsRepository) ListClientMembershipsByClientID(ctx context.Context, clientID uuid.UUID) ([]entity.ClientMembership, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for ListClientMembershipsByClientID")
	}

	var r0 []entity.ClientMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]entity.ClientMembership, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []entity.ClientMembership); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ClientMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClientMembershipsRepository creates a new instance of IClientMembershipsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClientMembershipsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClientMembershipsRepository {
	mock := &IClientMembershipsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
