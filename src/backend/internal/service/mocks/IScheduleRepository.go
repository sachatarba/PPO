// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sachatarba/course-db/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IScheduleRepository is an autogenerated mock type for the IScheduleRepository type
type IScheduleRepository struct {
	mock.Mock
}

// ChangeSchedule provides a mock function with given fields: ctx, shedule
func (_m *IScheduleRepository) ChangeSchedule(ctx context.Context, shedule entity.Schedule) error {
	ret := _m.Called(ctx, shedule)

	if len(ret) == 0 {
		panic("no return value specified for ChangeSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Schedule) error); ok {
		r0 = rf(ctx, shedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewSchedule provides a mock function with given fields: ctx, shedule
func (_m *IScheduleRepository) CreateNewSchedule(ctx context.Context, shedule entity.Schedule) error {
	ret := _m.Called(ctx, shedule)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Schedule) error); ok {
		r0 = rf(ctx, shedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSchedule provides a mock function with given fields: ctx, scheduleID
func (_m *IScheduleRepository) DeleteSchedule(ctx context.Context, scheduleID uuid.UUID) error {
	ret := _m.Called(ctx, scheduleID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, scheduleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduleByID provides a mock function with given fields: ctx, sheduleID
func (_m *IScheduleRepository) GetScheduleByID(ctx context.Context, sheduleID uuid.UUID) (entity.Schedule, error) {
	ret := _m.Called(ctx, sheduleID)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleByID")
	}

	var r0 entity.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Schedule, error)); ok {
		return rf(ctx, sheduleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Schedule); ok {
		r0 = rf(ctx, sheduleID)
	} else {
		r0 = ret.Get(0).(entity.Schedule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sheduleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchedulesByClientID provides a mock function with given fields: ctx, clientID
func (_m *IScheduleRepository) ListSchedulesByClientID(ctx context.Context, clientID uuid.UUID) ([]entity.Schedule, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for ListSchedulesByClientID")
	}

	var r0 []entity.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]entity.Schedule, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []entity.Schedule); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIScheduleRepository creates a new instance of IScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIScheduleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IScheduleRepository {
	mock := &IScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
