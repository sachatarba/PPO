# sudo docker exec -it f7d48f8654da /bin/bash - нужен id контейнера
# psql -U gym -d gym
version: "3.9"
services:
  nginx-entrypoint:
    image: nginx
    hostname: nginx-entrypoint
    container_name: nginx-entrypoint
    # restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    ports:
      - 80:80
    volumes:
      - ./conf:/etc/nginx/conf.d/
      - ./internal/server/v2/docs:/api/v2
      - ../../docs/md:/etc/nginx/documentation
      - ../frontend/app/static:/static
      - ../frontend/app/build:/build
    networks:
      - net
    extra_hosts:
      - "host.docker.internal:host-gateway"
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    # volumes: 
      # - ./db/migrations/:/docker-entrypoint-initdb.d
      # - ../.:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gym -d gym"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - net
  redis:
    image: redis:latest
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - /path/to/local/data:/root/redis
      - /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
    # environment:
      # - REDIS_PASSWORD=${REDIS_PASSWORD}
      # - REDIS_PORT=${REDIS_PORT}
      # - REDIS_DATABASES=${REDIS_DATABASES}
    command: ["redis-server", "--databases", "${REDIS_DATABASES}", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - net
  golang-api-v1:
    build:
      context: .
      dockerfile: apiV1.Dockerfile 
    ports:
      - "${GOLANG_API_V1_PORT}:${GOLANG_API_V1_PORT}"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GOLANG_HOST=${GOLANG_HOST}
      - GOLANG_PORT=${GOLANG_API_V1_PORT}
      - API_KEY=${API_KEY}
      - SHOP_ID=${SHOP_ID}
    depends_on:
      - postgres
      - redis
    networks:
      - net

  golang-api-v2:
    build:
      context: .
      dockerfile: apiV2.Dockerfile 
    ports:
      - "${GOLANG_API_V2_PORT}:${GOLANG_API_V2_PORT}"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GOLANG_HOST=${GOLANG_HOST}
      - GOLANG_PORT=${GOLANG_API_V2_PORT}
      - API_KEY=${API_KEY}
      - SHOP_ID=${SHOP_ID}
    depends_on:
      - postgres
      - redis
    networks:
      - net
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com  
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=8090           
    ports:
      - "8090:8090"  
    # volumes:
      # - ./pgadmin_data:/var/lib/pgadmin  
    restart: always  
    networks:
      - net

  golang-auth-v2:
    build:
      context: .
      dockerfile: auth.Dockerfile 
    ports:
      - "${AUTH_SERVER_PORT}:${AUTH_SERVER_PORT}"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GOLANG_HOST=${GOLANG_HOST}
      - GOLANG_PORT=${GOLANG_API_V2_PORT}
      - API_KEY=${API_KEY}
      - SHOP_ID=${SHOP_ID}
      - GRPC_CLIENT_SERVER_HOST=${GRPC_CLIENT_SERVER_HOST}
      - GRPC_CLIENT_SERVER_PORT=${GRPC_CLIENT_SERVER_PORT}
      - AUTH_SERVER_HOST=${AUTH_SERVER_HOST}
      - AUTH_SERVER_PORT=${AUTH_SERVER_PORT}
      - SMTP_ADDRESS=${SMTP_ADDRESS}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      - postgres
      - redis
    networks:
      - net

  golang-grpc-client-v2:
    build:
      context: .
      dockerfile: client.Dockerfile 
    ports:
      - "${GRPC_CLIENT_SERVER_PORT}:${GRPC_CLIENT_SERVER_PORT}"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GOLANG_HOST=${GOLANG_HOST}
      - GOLANG_PORT=${GOLANG_API_V2_PORT}
      - API_KEY=${API_KEY}
      - SHOP_ID=${SHOP_ID}
      - GRPC_CLIENT_SERVER_HOST=${GRPC_CLIENT_SERVER_HOST}
      - GRPC_CLIENT_SERVER_PORT=${GRPC_CLIENT_SERVER_PORT}
      - AUTH_SERVER_HOST=${AUTH_SERVER_HOST}
      - AUTH_SERVER_PORT=${AUTH_SERVER_PORT}
    depends_on:
      - postgres
      - redis
    networks:
      - net
    

networks:
  net: